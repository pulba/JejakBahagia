---
const current_url = Astro.url.pathname;
import Animation from "./animation.astro";
const { color } = Astro.props
---

<form method="get" id="formRsvp" class="fade-left w-full max-w-xl px-4 py-8  sm:px-12 mx-auto mb-10 bg-white rounded-md shadow-md border">
  <div class="mt-4 space-y-8 [&>*]:font-poppins [&>*]:text-left [&>*]:text-gray-800/50 [&>*]:space-y-2">
      <div>
          <label for="username">Nama</label>
          <input value="" required id="username" type="text" name="name" class="block w-full px-4 py-4 text-gray-700 bg-white border border-gray-200 rounded-md focus:outline-none">
      </div>
      <div>
        <label for="message">Ucapan</label>
        <textarea id="message" required rows="4" name="content" class="block p-5 w-full text-sm text-gray-800 bg-gray-50 rounded-lg border border-gray-300 focus:outline-none" placeholder="Selamat untuk acaranya..."></textarea>
      </div>
      <div>
      <div class="flex items-center mb-4 font-poppins">
        <input checked id="default-radio-1" name="present" type="radio" value="1" name="default-radio" class={`radio w-4 h-4 accent-${color}`}>
        <label for="default-radio-1" class={`ms-2 text-base font-medium text-${color}`}>Hadir</label>
      </div>
      <div class="flex items-center font-poppins">
        <input id="default-radio-2" name="present" type="radio" value="0" name="default-radio" class={`radio w-4 h-4 accent-${color}`}>
        <label for="default-radio-2" class={`ms-2 text-base font-medium text-${color}`}>Tidak Hadir</label>
      </div>
      </div>
  </div>

  <div class="flex justify-center min-[400px]:justify-end mt-6">
    <button id="send" type="submit" class={`px-4 py-2 z-50 relative bg-${color} rounded-full text-white font-poppins flex gap-1 transition-all duration-700 ease-linear`}>Kirim Pesan</button>

  </div>
</form>

  
<div x-data="{ data: [], hasData: false }" 
     x-init={`fetch('/api/rsvp-get?url=${current_url}').then(response => response.json()).then(rsvp => { data = rsvp; if(data.length > 0) hasData = true; })`}  
     class="fade-right w-full max-w-xl mx-auto overflow-auto bg-white space-y-6 px-2 sm:p-6 overflow-y-scroll h-96" 
     x-show="hasData">
  <template x-for="user in data" :key="user.id">
    <div class="flex flex-col leading-1.5 w-full p-4 border-gray-200 bg-gray-100 rounded-e-xl rounded-es-xl font-poppins" id="display">
      <div class="flex items-center justify-between">
        <p x-text="user.name" class="text-md font-semibold text-gray-800 capitalize"></p>
        <p x-text="user.present ? 'Hadir' : 'Tidak Hadir'"
           x-bind:class="{'text-white bg-gray-800': user.present, 'text-white bg-gray-400': !user.present}"
           class="text-sm font-normal px-3 py-1 rounded-full"></p>
      </div>
      <p x-text="user.content" class="text-base italic text-left py-5 text-gray-800/50 font-medium"></p>
    </div>
  </template>
</div>


<Animation />

<script define:vars={{ current_url }}>
  const formRsvp = document.querySelector("#formRsvp");


  function sanitizeInput(input) {
    const tempDiv = document.createElement("div");
    tempDiv.innerText = input;
    return tempDiv.innerHTML;
  }

  formRsvp.addEventListener("submit", (e) => {
    e.preventDefault();

    const usernameInput = document.getElementById("username");
    const messageInput = document.getElementById("message");


    if (usernameInput.value.length > 50) {
      alert("Username terlalu panjang");
      return;
    }

    if (messageInput.value.length > 500) {
      alert("Pesan terlalu panjang");
      return;
    }

    const username = sanitizeInput(usernameInput.value);
    const message = sanitizeInput(messageInput.value);

    const radio = Array.from(document.getElementsByClassName("radio"));
    let present;
    radio.forEach(function(elm){
      if(elm.checked){
        present = elm;
      }
    });

    // If no radio button is checked, show an alert
    if (!present) {
      alert("Pilih salah satu opsi kehadiran");
      return;
    }

    fetch(`/api/rsvp-send?name=${encodeURIComponent(username)}&content=${encodeURIComponent(message)}&present=${encodeURIComponent(present.value)}&url=${encodeURIComponent(current_url)}`, {
      method: "GET"
    })
    .then(response => response.json())
    .then(data => {
      console.log('Data berhasil diterima:', data);
      const result = document.querySelector("[x-data]").__x.$data;
      result.data.push(data);
      result.hasData = true;

      usernameInput.value = '';
      messageInput.value = '';
    })
    .catch(error => {
      console.error('Terjadi kesalahan:', error);
    });
  });
</script>



